// Generated by CoffeeScript 1.7.1

/*
  Ji-shi, cha-scha angular application for measuring content has been read
 */
var app;

app = angular.module('wordsApp', []);

app.factory('VkApi', [
  '$q', function($q) {
    var service;
    service = {
      test_mode: 1,
      getValue: function(scope, key) {
        var deferred;
        deferred = $q.defer();
        VK.api('storage.get', {
          key: key,
          test_mode: service.test_mode
        }, function(data) {
          return scope.$apply(function() {
            return deferred.resolve(data.response);
          });
        });
        return deferred.promise;
      },
      setValue: function(scope, key, value) {
        var deferred;
        deferred = $q.defer();
        VK.api('storage.set', {
          key: key,
          value: value,
          test_mode: service.test_mode
        }, function(data) {
          return scope.$apply(function() {
            if (data.response === 1) {
              return deferred.resolve();
            } else {
              return deferred.reject(data.error);
            }
          });
        });
        return deferred.promise;
      },
      init: function(scope) {
        var deferred;
        deferred = $q.defer();
        try {
          VK.init(function() {
            return deferred.resolve();
          }, function() {
            return deferred.reject("VK API initialization failed");
          }, '5.24');
        } catch (_error) {
          return false;
        }
        return deferred.promise;
      }
    };
    return service;
  }
]);

app.factory('WordsService', [
  '$q', '$http', 'VkApi', function($q, $http, storage) {
    var countChars, countWords, initData, initToday, loadTextFile, periods, processText, resetData, save, self, service, shift, stripHtml, today, update;
    self = this;
    service = {
      init: function(scope) {
        var deferred;
        self.scope = scope;
        deferred = $q.defer();
        storage.init(self.scope).then(function() {
          return storage.getValue(self.scope, 'data').then(function(data) {
            data = JSON.parse(data);
            if (data) {
              service.data = data;
              if (update()) {
                save(function() {
                  return deferred.resolve();
                });
                return;
              }
            } else {
              initData();
            }
            return deferred.resolve();
          });
        });
        return deferred.promise;
      },
      loadFiles: function(files) {
        var file, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          if (file.type.match('text/plain')) {
            _results.push(loadTextFile(file));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      reset: function() {
        resetData();
        initToday();
        return save();
      }
    };
    periods = [
      {
        n: 6,
        d: 1
      }, {
        n: 3,
        d: 7
      }, {
        n: 5,
        d: 4 * 7
      }, {
        n: 12,
        d: 4 * 7
      }
    ];
    loadTextFile = function(file) {
      var reader;
      reader = new FileReader();
      reader.onload = function(e) {
        return processText(e.target.result);
      };
      return reader.readAsText(file);
    };
    processText = function(text) {
      var chars, i, p, words;
      chars = countChars(text);
      words = countWords(text);
      service.lastSubmit = {
        chars: chars,
        words: words
      };
      update();
      service.data.today.chars += chars;
      service.data.today.words += words;
      service.data.chars += chars;
      service.data.words += words;
      for (i in service.data.periods) {
        p = service.data.periods[i];
        p.data[0] += words;
        p.words += words;
      }
      return save();
    };
    shift = function(_n) {
      var d, i, n, np, p, value, _i, _j, _k, _l, _len, _ref, _ref1, _ref2;
      for (i in service.data.periods) {
        p = service.data.periods[i];
        np = periods[i].n;
        d = periods[i].n;
        n = parseInt((_n + p.x) / d);
        if (n <= 0) {
          p.x += n;
          return;
        }
        p.x += _n - (n * d);
        d = np - n;
        if (d > 0) {
          for (i = _i = _ref = np - 1, _ref1 = np - d; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
            p.data[i] = p.data[i - n];
          }
          for (i = _j = 0; 0 <= n ? _j < n : _j > n; i = 0 <= n ? ++_j : --_j) {
            p.data[i] = 0;
          }
        } else {
          for (i = _k = 0; 0 <= np ? _k < np : _k > np; i = 0 <= np ? ++_k : --_k) {
            p.data[i] = 0;
          }
        }
        p.words = 0;
        _ref2 = p.data;
        for (_l = 0, _len = _ref2.length; _l < _len; _l++) {
          value = _ref2[_l];
          p.words += value;
        }
      }
    };
    update = function() {
      var t;
      t = today();
      if (service.data.today) {
        if (service.data.today.t !== t) {
          shift(t - service.data.today.t);
          initToday();
          return true;
        }
      } else {
        initToday();
        return true;
      }
      return false;
    };
    initToday = function() {
      return service.data.today = {
        t: today(),
        words: 0,
        chars: 0
      };
    };
    initData = function() {
      service.data = {};
      return resetData();
    };
    resetData = function() {
      service.data.chars = 0;
      service.data.words = 0;
      return service.data.periods = [
        {
          x: 0,
          data: [0, 0, 0, 0, 0, 0],
          words: 0
        }, {
          x: 0,
          data: [0, 0, 0],
          words: 0
        }, {
          x: 0,
          data: [0, 0, 0, 0, 0],
          words: 0
        }, {
          x: 0,
          data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          words: 0
        }
      ];
    };
    save = function(cb) {
      var p;
      p = storage.setValue(self.scope, 'data', JSON.stringify(service.data));
      if (cb) {
        p.then(cb);
      }
      return console.log('save');
    };
    countChars = function(s) {
      s = s.replace(/[^a-zA-Z0-9абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ]/gi, "");
      return s.length;
    };
    countWords = function(s) {
      s = s.replace(/[\s\.,\?\!;:]/gi, " ");
      s = s.replace(/[^a-zA-Z0-9абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ\s]/gi, "");
      s = s.replace(/(^\s*)|(\s*$)/gi, "");
      s = s.replace(/[ ]{2,}/gi, " ");
      return s.split(' ').length;
    };
    stripHtml = function(html) {
      var tmp;
      tmp = document.createElement("DIV");
      tmp.innerHTML = html;
      return tmp.textContent || tmp.innerText || "";
    };
    today = function() {
      return parseInt((new Date().getTime() - new Date(1970, 0, 5).getTime()) / 86400000);
    };
    return service;
  }
]);

app.controller('WordsController', [
  '$scope', 'WordsService', function($scope, service) {
    $scope.reset = function() {
      if (!confirm('Уверены?')) {
        return;
      }
      return service.reset();
    };
    $scope.processFiles = function(files) {
      return service.loadFiles(files);
    };
    return service.init($scope).then(function() {
      $scope.data = service.data;
      return $scope.loaded = true;
    });
  }
]);

app.directive('dropFiles', function() {
  return {
    restrict: 'A',
    scope: {
      onDrop: '&'
    },
    link: function(scope, element, attr) {
      var el;
      el = element[0];
      el.addEventListener('dragover', function(e) {
        if (e.preventDefault) {
          e.preventDefault();
        }
        this.classList.add('over');
        return false;
      }, false);
      el.addEventListener('dragenter', function(e) {
        this.classList.add('over');
        return false;
      }, false);
      el.addEventListener('dragleave', function(e) {
        this.classList.remove('over');
        return false;
      }, false);
      return el.addEventListener('drop', function(e) {
        if (e.preventDefault) {
          e.preventDefault();
        }
        if (e.stopPropagation) {
          e.stopPropagation();
        }
        this.classList.remove('over');
        scope.onDrop({
          files: e.dataTransfer.files
        });
        return false;
      }, false);
    }
  };
});

//# sourceMappingURL=app.map
