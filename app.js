// Generated by CoffeeScript 1.7.1

/*
  Ji-shi, cha-scha angular application for measuring content has been read
 */
var app;

app = angular.module('wordsApp', []);

app.service('VkService', [
  '$http', function($http) {
    var onIncorrectInit, service;
    service = this;
    service.connected = false;
    service.test_mode = 1;
    onIncorrectInit = function() {
      return console.log('VK API initialization failed');
    };
    try {
      VK.init(function() {
        return service.connected = true;
      }, function() {
        return onIncorrectInit();
      }, '5.24');
    } catch (_error) {
      onIncorrectInit();
    }
    service.getValue = function(key, cb) {
      return VK.api('storage.get', {
        key: key,
        test_mode: service.test_mode
      }, function(data) {
        return cb(data.response);
      });
    };
    service.setValue = function(key, value, cb) {
      return VK.api('storage.set', {
        key: key,
        value: value,
        test_mode: service.test_mode
      }, function(data) {
        if (cb) {
          return cb(data.response === 1);
        }
      });
    };
    return service;
  }
]);

app.controller('WordsController', [
  '$scope', '$http', 'VkService', function($scope, $http, vk) {
    var countChars, countWords, ctrl, initData, initToday, periods, processText, save, shift, stripHtml, today, update;
    ctrl = this;
    ctrl.lastSubmit = void 0;
    periods = [
      {
        n: 6,
        d: 1
      }, {
        n: 3,
        d: 7
      }, {
        n: 5,
        d: 4 * 7
      }, {
        n: 12,
        d: 4 * 7
      }
    ];
    ctrl.reset = function() {
      if (!confirm('Уверены?')) {
        return;
      }
      initData();
      initToday();
      return save();
    };
    ctrl.processUrl = function() {
      var url;
      url = 'http://www.corsproxy.com/' + ctrl.url.replace(/https?:\/\//, "");
      console.log(url);
      return $http.get(url).success(function(data) {
        ctrl.url = '';
        return processText(stripHtml(data));
      }).error(function(err) {
        return console.log(err);
      });
    };
    processText = function(text) {
      var chars, i, p, words;
      console.log(text);
      chars = countChars(text);
      words = countWords(text);
      $scope.lastSubmit = {
        chars: chars,
        words: words
      };
      update();
      ctrl.data.today.chars += chars;
      ctrl.data.today.words += words;
      ctrl.data.chars += chars;
      ctrl.data.words += words;
      for (i in ctrl.data.periods) {
        p = ctrl.data.periods[i];
        p.data[0] += words;
        p.words += words;
      }
      return save();
    };
    save = function() {
      var data;
      return vk.setValue('data', data = JSON.stringify(ctrl.data));
    };
    shift = function(_n) {
      var d, i, n, np, p, value, _i, _j, _k, _l, _len, _ref, _ref1, _ref2;
      for (i in ctrl.data.periods) {
        p = ctrl.data.periods[i];
        np = periods[i].n;
        d = periods[i].n;
        n = parseInt((_n + p.x) / d);
        if (n <= 0) {
          p.x += n;
          return;
        }
        p.x += _n - (n * d);
        d = np - n;
        if (d > 0) {
          for (i = _i = _ref = np - 1, _ref1 = np - d; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
            p.data[i] = p.data[i - n];
          }
          for (i = _j = 0; 0 <= n ? _j < n : _j > n; i = 0 <= n ? ++_j : --_j) {
            p.data[i] = 0;
          }
        } else {
          for (i = _k = 0; 0 <= np ? _k < np : _k > np; i = 0 <= np ? ++_k : --_k) {
            p.data[i] = 0;
          }
        }
        p.words = 0;
        _ref2 = p.data;
        for (_l = 0, _len = _ref2.length; _l < _len; _l++) {
          value = _ref2[_l];
          p.words += value;
        }
      }
    };
    update = function() {
      var t;
      t = today();
      if (ctrl.data.today) {
        if (ctrl.data.today.t !== t) {
          shift(t - ctrl.data.today.t);
          initToday();
          return true;
        }
      } else {
        initToday();
        return true;
      }
      return false;
    };
    initToday = function() {
      return ctrl.data.today = {
        t: today(),
        words: 0,
        chars: 0
      };
    };
    initData = function() {
      return ctrl.data = {
        chars: 0,
        words: 0,
        periods: [
          {
            x: 0,
            data: [0, 0, 0, 0, 0, 0],
            words: 0
          }, {
            x: 0,
            data: [0, 0, 0],
            words: 0
          }, {
            x: 0,
            data: [0, 0, 0, 0, 0],
            words: 0
          }, {
            x: 0,
            data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            words: 0
          }
        ]
      };
    };
    countChars = function(s) {
      s = s.replace(/\s/gi, "");
      return s.length;
    };
    countWords = function(s) {
      s = s.replace(/(^\s*)|(\s*$)/gi, "");
      s = s.replace(/\s/, " ");
      s = s.replace(/\n/, " ");
      s = s.replace(/[ ]{2,}/gi, " ");
      return s.split(' ').length;
    };
    stripHtml = function(html) {
      var tmp;
      tmp = document.createElement("DIV");
      tmp.innerHTML = html;
      return tmp.textContent || tmp.innerText || "";
    };
    today = function() {
      return parseInt((new Date().getTime() - new Date(1970, 0, 5).getTime()) / 86400000);
    };
    initData();
    vk.getValue('data', function(data) {
      data = JSON.parse(data);
      if (data) {
        ctrl.data = data;
      }
      if (update()) {
        save();
      }
      return $scope.$apply();
    });
    return this;
  }
]);

//# sourceMappingURL=app.map
